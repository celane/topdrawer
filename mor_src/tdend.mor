%K                       N O T I C E
%K 
%K This  program and  associated  documentation,  and  the
%K material and  data contained  therein,  were  developed
%K under the sponsorship of the U. S. government.  Neither
%K the U.S.  nor the U.S.D.O.E.,   nor the Leland Stanford
%K Junior  University,  nor  their  employees,  nor  their
%K respective  contractors,   subcontractors,    or  their
%K employees, even unto the seventh generation,  makes any
%K warranty, express or implied,  or assumes any liability
%K or  responsibility   for  accuracy,    completeness  or
%K usefulness of any information,   apparatus,  product or
%K process disclosed,  or represents that its use will not
%K infringe  privately-owned  rights.     Mention  of  any
%K product, its manufacturer, or suppliers shall not,  nor
%K is it  intended to,  imply approval,   disapproval,  or
%K fitness for any particular use.   A royalty-free,  non-
%K exclusive right  to use  and disseminate  same for  any
%K purpose whatsoever  is expressly  reserved to  the U.S.
%K and the University.
%K
%N
%U+ TDMACROS.MOR
%L
"  ------------ START OF FORTRAN-CALLABLE ROUTINES 'TDEND' --"
"MACROS FOR CHECKING THE NUMBER OF ARGUEMENTS IN THE CALLING
 ROUTINE.  EVERY USER CALL IS CHECKED FOR THE CORRECT NUMBER
 OF ARGUEMENTS.  THIS REQUIRES A CERN LIBRARY SUBROUTINE NOARG.
 IN EACH ROUTINE IN WHICH THE CALL IS MADE, THE FIRST EXECUTABLE
 STATEMENT IS 'CALL NOARG(NARG)'.
 IN SUBROUTINES WHICH CAN BE CALLED BY  THE USER, SIMPLE
 (NON-ARRAY) ARGUEMENTS ARE SET OFF BY SLASHES, E.G. SUBROUTINE
 TDCASE(TEXT,CASE,/X/,/Y/).  THIS TELLS THE COMPILER TO
 USE THE GIVEN LOCATION FOR THAT VARIABLE, RATHER THAN ITS
 USUAL OPTIMIZATION OF MAKEING A LOCAL COPY WHICH IS PUT BACK
 INTO THE ORIGINAL LOCATION WHEN A RETURN IS EXECUTED.
 IN THE CASE OF A SHORT CALL, THE LOCAL COPY GAME RESULTS IN
 A FETCH FROM A GARBAGE LOCATION WHEN THE ROUTINE IS ENTERED,
 AND A STORE TO THE SAME LOCATION WHEN IT RETURNS.
	J.Clement - Removed /X/ etc. for VAX
	Modified T2INTR,T2REAL to work on VAX
	Block data moved to T2ERRA so that library works.
	and UGXERR made external.

 A POSSIBLE PROBLEM IN CHECKING THE LENGTH OF A CALLING SEQUENCE
 IS THAT IF CALLS WITH NO ARGUEMENTS ARE GIVEN NO ARGUEMENT LIST,
 RATHER THAN A ZERO-LENGTH ONE, A GARBAGE VALUE MAY RESULT.
 IBM HAS FIXED THIS IN RECENT YEARS, BUT IT MAY HAPPEN ON THE
 MACHINES OF OTHER MANUFACTURERS.

"
%'$EXTERNAL'='EXTERNAL T2SETC,UGXERR,T2ERRA;'

	"TDFCOM communicates between TDTITL and TDTSET"
%'$TDFCOM'='"
	COMMON /TDFCOM/NOPT,OPTIONS;
	INTEGER NOPT;
	CHARACTER*100 OPTIONS;"'

%'$HOLLERITH'='INTEGER'

%E  SUBROUTINE TDEND
SUBROUTINE TDEND;
%';SUBROUTINE'=';<RESET> <SET> ;"SUBROUTINE"'
<SET>;                      "Ready for reset"
   IMPLICIT NONE;
   $EXTERNAL;
   "THIS USER-CALLABLE ROUTINE IS HERE TO PROVIDE A C-SECT
   CORRESPONDING TO THE MEMBERNAME IN THE LOADMODULE LIB, AND
   TO ALLOW ALL USER-CALLED ROUTINES TO START WITH 'TD'"
   CALL TXEND;
END;
%E  SUBROUTINE TDCASE
SUBROUTINE TDCASE(TEXT,CASE,X,Y,Z);
   IMPLICIT NONE;
   $TDFCOM
"
   DATA OPTIONS/' '/,NOPT/1/;
"
   CHARACTER*8 STR;
   REAL ASTR; EQUIVALENCE (STR,ASTR);
   $HOLLERITH TEXT(256),CASE(256);
   REAL X,Y,Z;
"  THIS USER-CALLABLE ROUTINE DOES TITLES
   TEXT IS A CHARACTER STRING, TERMINATED BY A SEMICOLON.
   (X,Y) MAY BE COORDINATES, OR X MAY BE 'X', 'Y', OR 'G'.
   OTHER PARAMETERS MAY BE SET BY CALLING TDTSET(SIZE,ANGLE,ISPACES)
"
   $EXTERNAL;
   $SPECIFICATION;
   INTEGER NN,NTITLE,IERFLG,I,NCASE;
      INTEGER T2INTR; REAL T2REAL;
      CHARACTER*256 STEXT,SCASE;
   $EQUIVALENCE;
   $DATA;
   $CHECK ARGS(2,5);
   IERFLG=0;   "NO ERROR YET"
   "SCAN TEXT FOR TERMINATING SEMICOLON"
      NTITLE=0; "CHARACTER COUNT" I=0; "PAIR FLAG"
      <NN=1,256;  "Maximum of 256 chars"
$ASCII;
	 IF (TEXT(NN).lt. 32) <EXIT>;
$ELSE;
	 IF (TEXT(NN).eq.0) <EXIT>;
$END;
	 NTITLE=NTITLE+1;
	 STEXT(NTITLE:NTITLE)=CHAR(TEXT(NN));
	 IF (STEXT(NTITLE:NTITLE).eq.';') THEN;  "GOT A SEMICOLON"
	    IF (I.EQ.0) THEN;      "CHECK FOR A PAIR"
	       NTITLE=NTITLE-1;    "EITHER THIS IS THE FIRST OF A
			  PAIR, AND I DONT WANT IT, OR IT IS THE END OF
			  TEXT FLAG, AND I DONT WANT IT."
	       I=1;  "FLAG FOR THE MIDDLE OF A PAIR"
	    ELSE; I=0;             "RESET FLAG"
	    ENDIF;
	 ELSEIF (I .eq. 1) THEN;
	    NTITLE=NTITLE-1; <EXIT>
	 ENDIF;
      >
      IF (NN.GE.256) THEN;  "TOO MANY CHARACTERS"
	 ERROR MESSAGE;
	       ('*** ERROR *** Text has no terminating semicolon.'
	       ,' call to TDCASE or TDTITL ignored.');
	 NOPT=1; OPTIONS(1:1)=' ';
	 RETURN;
      ENDIF;
   "SCAN CASE"
      SCASE=' ';         "Clear case"
      <I=1,NTITLE;
$ASCII;
	 IF (CASE(I).lt. 32) <EXIT>;
$ELSE;
	 IF (CASE(I).eq. 0) <EXIT>;
$END;
	 IF (CHAR(CASE(I)).eq.';') <EXIT>;
	 SCASE(I:I)=CHAR(CASE(I));
      >
      NCASE=NTITLE;
   IF (NARG.EQ.3) THEN;
      ASTR=X;
      IF(STR(1:1).ge.'a') STR(1:1)=CHAR(ICHAR(STR(1:1))-ICHAR('a')+ICHAR('A'));
      IF(STR(1:1).eq.'X') THEN;
	 STR='X';
      ELSEIF(STR(1:1).eq.'Y') THEN;
	 STR='Y';
      ELSEIF(STR(1:1).eq.'Z') THEN;
	 STR='Z';
      ELSEIF(STR(1:1).eq.'B') THEN;
	 STR='BOTTOM';
      ELSEIF(STR(1:1).eq.'L') THEN;
	 STR='LEFT';
      ELSEIF(STR(1:1).eq.'T' )THEN;
	 STR='TOP';
      ELSEIF(STR(1:1).eq.'R') THEN;
	 STR='RIGHT';
      ELSEIF(STR(1:1).eq.'G') THEN;
	 STR='G';
      ELSE;
	 ERROR MESSAGE X,X;
	     ('*** ERROR *** INVALID POSITION KEYWORD "',A1,
	     '" (',Z8,'). CALL IGNORED');
	 NOPT=1; OPTIONS(1:1)=' ';
	 RETURN;
      ENDIF;
      CALL TDTEXT(STR//OPTIONS(1:NOPT),STEXT(1:NTITLE),SCASE(1:NTITLE));
   ELSEIF (NARG.EQ.4) THEN;          "COORDINATES GIVEN"
      CALL TDTEXT(OPTIONS(1:NOPT),STEXT(1:NTITLE),SCASE(1:NTITLE),X,Y);
   ELSEIF (NARG.EQ.5) THEN;          "COORDINATES GIVEN"
      CALL TDTEXT(OPTIONS(1:NOPT),STEXT(1:NTITLE),SCASE(1:NTITLE),X,Y,Z);
   ENDIF;
   NOPT=1; OPTIONS(1:1)=' ';
   IF(FLAGS(54))CALL TXVOID;   "FLUSH TD BUFFERS"
END;
%E  SUBROUTINE TDCRCL
LOGICAL FUNCTION TDCRCL(XYZ,SIZE,MODE,JTYPE,JTXTUR,CLIM,rotate);
   IMPLICIT NONE;
   INTEGER ITXTUR;
   INTEGER IMODE(2),MODE,JTYPE,JTXTUR;
   REAL CRCLIM(2),CLIM(2),XYZ(3),SIZE(3),rot,rotate;
   $FLAGS;
   $CHECK ARGS(2,6);
   IMODE(1) = 0;
   IMODE(2) = 1;
   ITXTUR=0; CRCLIM(1)=0; CRCLIM(2)=0;
   rot = 0;
   IF (NARG.gt.2) IMODE(2) = MIN(MAX(MODE,1),3);
   IF (NARG.gt.3) IMODE(1) = ABS(JTYPE);
   IF (NARG.gt.4) ITXTUR = IAND(JTXTUR,NOT(7));
   IF (NARG.gt.5) THEN;
      CRCLIM(1)=CLIM(1); CRCLIM(2)=CLIM(2);
   ENDIF;
   IF (NARG.gt.5) rot = rotate;
   $ERROR=.false.;
   CALL T2CRCL(XYZ,IMODE,SIZE,ITXTUR,CRCLIM,rot);
   TDCRCL=$ERROR;
END;
%E  SUBROUTINE TDARRO
LOGICAL FUNCTION TDARRO(XYZ,SIZE,MODE,JTXTUR);
   IMPLICIT NONE;
   $SPECIFICATION;
   INTEGER IMODE(2),MODE(2),ITXTUR,I,JTXTUR;
   REAL AROD(4),SIZE(4),XYZ(3,2);
   $CHECK ARGS(1,4);
   ITXTUR=0;
   <I=1,2; IMODE(I)=0; AROD(I)=0; >
   AROD(3) = ASIZE;              "Default values"
   AROD(4) = AFLARE;
   IF(NARG.ge.2) THEN;
      <I=1,4; IF(SIZE(I).ne.0) AROD(I)=SIZE(I); >
   ENDIF;
   IF(NARG.ge.3) THEN;
      <I=1,2; IMODE(I)=MODE(I);>
   ENDIF;
   IF(NARG.ge.4)ITXTUR = JTXTUR;
   $ERROR=.false.;
   CALL T2ARRO(XYZ,IMODE,AROD,ITXTUR);
   TDARRO=$ERROR;
END;
%E  SUBROUTINE TDFLSH
   SUBROUTINE TDFLSH;
   IMPLICIT NONE;
   CALL TXVOID;   "FLUSH TD BUFFERS"
END;
%E  SUBROUTINE TDHIST
SUBROUTINE TDHIST(NP,X,Y,DX,DY,LEVEL,JTYPE,Z,DZ);
"  THIS USER-CALLABLE ROUTINE IS EQUIVALENT TO THE TD HIST COMMAND"
   $SPECIFICATION; $EXTERNAL;
      REAL X(*),Y(*),DX(*),DY(*),Z(*),DZ(*);
      INTEGER LEVEL(1),JTYPE(1);  "TO REQUIRE CALL-BY-NAME"
      INTEGER INTNP,T2INTR; REAL T2REAL; EXTERNAL T2INTR,T2REAL;
   $EQUIVALENCE;
   $SPECIFYNONE;
   $CHECK ARGS(3,9);
   FLAGS(30)=.TRUE.;
   INTNP=T2INTR(NP);
$VM;
      CALL T2TYPE('X   ','TDHIST',INTNP,X);
      CALL T2TYPE('Y   ','TDHIST',INTNP,Y);
$END;
   <CASE> NARG-2 <OF> :3:,:4:,:5:,:6:,:7:,:8:,:9: <
      :3: <CALL T2STLX(X,Y,HNONE,HNONE,HNONE,HNONE,INTNP);
	   CALL T2HIST(X,Y,HNONE,HNONE,HNONE,HNONE,0,0,INTNP,1,HNONE,
		HNONE,HNONE,HNONE);>
      :4: <
$VM;
	   CALL T2TYPE('DX  ','TDHIST',INTNP,DX);
$END;
	   CALL T2STLX(X,Y,DX,HNONE,HNONE,HNONE,INTNP);
	   CALL T2HIST(X,Y,HNONE,DX,HNONE,HNONE,0,0,INTNP,1,HNONE,
		HNONE,HNONE,HNONE);>
      :5: <
$VM;
	   CALL T2TYPE('DX  ','TDHIST',INTNP,DX);
	   CALL T2TYPE('DY  ','TDHIST',INTNP,DY);
$END;
	   CALL T2STLX(X,Y,DX,DY,HNONE,HNONE,INTNP);
	   CALL T2HIST(X,Y,HNONE,DX,DY,HNONE,0,0,INTNP,1,HNONE,
		HNONE,HNONE,HNONE);>
      :6: <
$VM;
	   CALL T2TYPE('DX  ','TDHIST',INTNP,DX);
	   CALL T2TYPE('DY  ','TDHIST',INTNP,DY);
$END;
	   CALL T2STLX(X,Y,DX,DY,HNONE,HNONE,INTNP);
	   CALL T2HIST(X,Y,HNONE,DX,DY,HNONE,JTYPE(1),0,INTNP,1,HNONE,
		HNONE,HNONE,HNONE);>
      :7: <
$VM;
	   CALL T2TYPE('DX  ','TDHIST',INTNP,DX);
	   CALL T2TYPE('DY  ','TDHIST',INTNP,DY);
$END;
	   CALL T2STLX(X,Y,DX,DY,HNONE,HNONE,INTNP);
	   CALL T2HIST(X,Y,HNONE,DX,DY,HNONE,JTYPE(1),LEVEL(1),INTNP,1,HNONE,
		HNONE,HNONE,HNONE);>
      :8: <
	   CALL T2STLX(X,Y,DX,DY,Z,HNONE,INTNP);
	   CALL T2HIST(X,Y,Z,DX,DY,HNONE,JTYPE(1),LEVEL(1),INTNP,1,HNONE,
		HNONE,HNONE,HNONE);>
      :9: <
	   CALL T2STLX(X,Y,DX,DY,Z,DZ,INTNP);
	   CALL T2HIST(X,Y,Z,DX,DY,DZ,JTYPE(1),LEVEL(1),INTNP,1,HNONE,
		HNONE,HNONE,HNONE);>
   >
   FLAGS(30)=.FALSE.;
   IF(FLAGS(54))CALL TXVOID;   "FLUSH TD BUFFERS"
END;
%E  SUBROUTINE TDJOIN
SUBROUTINE TDJOIN(NP,X,Y,DX,DY,LEVEL,MODE,Z,DZ);
   IMPLICIT NONE;
"  THIS USER-CALLABLE ROUTINE IS EQUIVALENT TO THE TD JOIN COMMAND"
   REAL X(*),Y(*),DX(*),DY(*),Z(*),DZ(*);
   $SPECIFICATION; $EXTERNAL;
      INTEGER I,LLL,MMM,LEVEL,MODE,NP,INTNP;
      INTEGER T2INTR; REAL T2REAL; EXTERNAL T2INTR,T2REAL;
   $EQUIVALENCE;
   $DATA;
   $SPECIFYNONE;

   $CHECK ARGS(3,9);
   FLAGS(30)=.TRUE.;
   "CHECK ARRAY TYPE"
   INTNP=T2INTR(NP);
$VM;
      CALL T2TYPE('X   ','TDJOIN',INTNP,X);
      CALL T2TYPE('Y   ','TDJOIN',INTNP,Y);
$END;
   <BLOCK> <
      I=NARG-2; LLL=0; MMM=0; "DEFAULT VALUES"
      IF (NARG.ge.6) LLL=T2INTR(LEVEL);
      IF (NARG.ge.7) MMM=T2INTR(MODE);
      GO TO (:3:,:4:,:5:,:6:,:7:,:8:,:9:),I;
      :8: CALL T2STLX(X,Y,DX,DY,Z,HNONE,INTNP);
	  <EXIT>;
      :9: CALL T2STLX(X,Y,DX,DY,Z,DZ,INTNP);
	  <EXIT>;
      :5:;
      :6:;
      :7:
$VM;
	  CALL T2TYPE('DX  ','TDJOIN',INTNP,DX);
	  CALL T2TYPE('DY  ','TDJOIN',INTNP,DY);
$END;
	  CALL T2STLX(X,Y,DX,DY,HNONE,HNONE,INTNP);
	  <EXIT>;
      :4: 
$VM;
	  CALL T2TYPE('DX  ','TDJOIN',INTNP,DX);
$END;
	  CALL T2STLX(X,Y,DX,HNONE,HNONE,HNONE,INTNP);
	  <EXIT>;
      :3: CALL T2STLX(X,Y,HNONE,HNONE,HNONE,HNONE,INTNP);
   >
   IF (NARG .ge. 8) THEN;         "3-d plot ?"
      CALL T2JOIN(X,Y,Z,MMM,LLL,INTNP,1,HNONE);
   ELSE;
      CALL T2JOIN(X,Y,HNONE,MMM,LLL,INTNP,1,HNONE);
   ENDIF;
   FLAGS(30)=.FALSE.;
   IF(FLAGS(54))CALL TXVOID;   "FLUSH TD BUFFERS"
END;
%E  SUBROUTINE TDLIMS
SUBROUTINE TDLIMS(CARDIN,NP,VALS,ERRS);
   IMPLICIT NONE;
   "Uses the VALS and ERRS array to determine plot limits.
    CARD may be	X	Sets both XMIN and XMAX
		XMIN	Sets XMIN only
		XMAX	Sets XMAX only
		Y	Sets both YMIN and YMAX
		YMIN	Sets YMIN only
		YMAX	Sets YMAX only
		RESET	Resets X,Y,Z limits
		XRESET	Resets X limits ...
   "
   $SPECIFYNONE;
   $SPECIFICATION;
   $EXTERNAL;
   CHARACTER*(*) CARDIN;
   INTEGER INFOIN(10),IXXXXX,NCARD;
   CHARACTER*10 CARDST;
   INTEGER I,NP,IXYZ,IXYZ2,INTNP;
   REAL VALS(*),ERRS(*);
   INTEGER T2INTR; REAL T2REAL; EXTERNAL T2INTR,T2REAL;
   INTEGER IFLAG(2);   "For call to T2STL1"
   REAL EXTREM(2);     "Ditto"
   $DATA;

   $CHECK ARGS(3,4);
   %'KEYORD'='"INFOIN(2)"';
   %'INTERP'='"INFOIN(1)"';
   %'INTEG'='"INFOIN(3)"';
   %'TOKEN('='"T2TOKK("';
   <TOKEN USING INFOIN,CARDST(1:NCARD)>;
   <I=1,10; INFOIN(I)=0; >
   INTNP=T2INTR(NP);
$VM;
   CALL T2TYPE('VALS','TDLIMS',INTNP,VALS);
   IF (NARG.EQ.4) CALL T2TYPE('ERRS','TDLIMS',INTNP,ERRS);
$END;
   CARDST=CARDIN;
   CALL T2UPCS(CARDST);
   CALL T2SQEZ(CARDST,NCARD);
   <TOKEN> <
      KEY:: <
	 RESET:13,XRESET:11,YRESET:22,ZRESET:33 <
	    <I=INTEG/10,MOD(INTEG,10);
	       <IXYZ2=I*2,I*2+1;
		  FLAGS(IXYZ2+3) = .FALSE.;     "Not exists"
		  FLAGS(IXYZ2+63) = .FALSE.;    "Reset by user"
	       >
	    >
	 >
	 X:1,Y:2,Z:3,XMIN:11,XMAX:21,YMIN:12,YMAX:22,ZMIN:13,ZMAX:23 <
	    IXYZ=MOD(INTEG,10);
	    <CASE> INTEG/10+1 <OF> :ALL:,:MIN:,:MAX: <
	       :MIN: < IFLAG(1)=-1; IFLAG(2)=1; >
	       :MAX: < IFLAG(1)=1;  IFLAG(2)=-1; >
	       :ALL: < IFLAG(1)=-1; IFLAG(2)=-1; >  "Both limits"
	    >
	    EXTREM(1)=XYZLIM(IXYZ,1); EXTREM(2)=XYZLIM(IXYZ,2);
	    IXYZ2 = 2*IXYZ;
	    <I=1,2;
	       IF (IFLAG(I).EQ.-1) THEN;   "Finding MIN/MAX"
		  IF (FLAGS(IXYZ2+2+I)) IFLAG(I) = 0;   "Exists already?"
		  FLAGS(IXYZ2+2+I)  = .TRUE.;     "Now exists"
		  FLAGS(IXYZ2+62+I) = .TRUE.;    "Set by user"
	       ENDIF;
	    >
	    IF (NARG.EQ.4) "Call with errors ?"
	    THEN;
	       CALL T2STL1(VALS,ERRS,HNONE,HNONE,
		  INTNP,NONLIN(IXYZ),IFLAG,EXTREM,1,1,1,1);
	    ELSE;
	       CALL T2STL1(VALS,HNONE,HNONE,HNONE,
		  INTNP,NONLIN(IXYZ),IFLAG,EXTREM,1,1,1,1);
	    ENDIF;
	    XYZLIM(IXYZ,1)=EXTREM(1); XYZLIM(IXYZ,2)=EXTREM(2);
	    "FOR THE TRANSITION"
	 >
      >
      ELSE:: <
	 IF (NERR.LE.5) THEN;
	    ERROR MESSAGE;('*** ERROR *** Illegal option in TDLIMS');
	    RETURN;
	 ENDIF;
      >
   >
   FLAGS(75)=.FALSE.;            "Data system not set"
END;
%E  SUBROUTINE TDMAIN
SUBROUTINE TDMAIN(I);
   IMPLICIT NONE;
   INTEGER I,J;
   $EXTERNAL;
   $SPECIFICATION;
   $CHECK ARGS(0,1);
   CALL T2MAIN(J,' ');
   IF (NARG.EQ.1) I=J;
   IF(FLAGS(54))CALL TXVOID;   "FLUSH TD BUFFERS"
END;
%E  SUBROUTINE TDNEWP
SUBROUTINE TDNEWP;
   IMPLICIT NONE;
"
   This user-callable routine starts a new plot. 
   The original routine also had an optional parameter which
   specified an ALIAS as a HOLLERITH string.
"
   $EXTERNAL;
   $SPECIFICATION;
   $EQUIVALENCE;
   $DATA;
   "CLEAN UP"
      FLAGS(30)=.TRUE.;
      CALL T2REST;  "RESET FLAGS"
      CALL TXNEXT;  "START NEW PICTURE"
      FLAGS(30)=.FALSE.;
   END;
%E  SUBROUTINE TDNEW
SUBROUTINE TDNEW(ALIAS);
   IMPLICIT NONE;
   CHARACTER*(*) ALIAS;
"
   This user-callable routine starts a new plot.  Alias may be blank
   in which case no alias is used, or it may contain up to eight
   characters of an alias name, which will be used for the new member.
"
   $EXTERNAL;
   $SPECIFICATION;
   $EQUIVALENCE;
   $DATA;
      PXNAME=ALIAS;
      FLAGS(30)=.TRUE.;
      CALL T2REST;  "RESET FLAGS"
      CALL TXNEXT;  "START NEW PICTURE"
      FLAGS(30)=.FALSE.;
   END;
%E  SUBROUTINE TDPLOT
SUBROUTINE TDPLOT(NP,X,Y,DX,DY,ISYM,JTYPE);
   IMPLICIT NONE;
"  THIS IS A USER-CALLABLE ROUTINE TO PLOT POINTS
   WITH TOPDRAWER.
"
   REAL X(*),Y(*),DX(*),DY(*);
   INTEGER NP,JTYPE;
   $HOLLERITH ISYM(2);
   $EXTERNAL;
   $SPECIFICATION;
   $EQUIVALENCE;
      INTEGER LCSAV,LWSAV,ITXTUR,INTNP;
      REAL SYSIZ;
      INTEGER T2INTR; REAL T2REAL; EXTERNAL T2INTR,T2REAL;
      REAL SYMSAV; "CALLING SEQUENCE FOR T2PLOT REQUIRES THIS"
      EXTERNAL TXSYM; REAL TXSYM; "PACK CHAR PAIR INTO 1 REAL WORD"
      CHARACTER*2 CSYM;     "FOR CALL TO TXSYM"
   $DATA;
   $SPECIFYNONE;
      DATA CSYM/' '/;  "AVOID ERROR MESSAGES FROM TXSYM"

   $CHECK ARGS(0,7);
   LCSAV=LINCOL; LWSAV=LINWID;       "Save intensity, color"
   FLAGS(30)=.TRUE.;
   SYMSAV=SYMBOL;                    "Save current symbol"
   ITXTUR=0;
   SYSIZ=0;
   INTNP=T2INTR(NP);
   IF(NARG .ge. 7) ITXTUR=JTYPE;
   IF (NARG.GE.3) THEN;
      IF (NARG.GE.6) THEN;
	 CSYM(1:1)=CHAR(ISYM(1));
	 CSYM(2:2)=CHAR(ISYM(2));
	 SYMBOL = TXSYM(CSYM);   "GET IT IN PACKED FORM"
      ENDIF;
$VM;
      CALL T2TYPE('X   ','TDPLOT',INTNP,X);
      CALL T2TYPE('Y   ','TDPLOT',INTNP,Y);
$END;
      IF (NARG.GE.5) THEN;
$VM;
	 CALL T2TYPE('DX  ','TDPLOT',INTNP,DX);
	 CALL T2TYPE('DY  ','TDPLOT',INTNP,DY);
$END;
	 CALL T2STLX(X,Y,DX,DY,HNONE,HNONE,INTNP);
	 CALL T2PLOT(X,Y,HNONE,DX,DY,HNONE,HNONE,INTNP,1,ITXTUR
	    ,SYSIZ,XYZLIM
	    ,HNONE,HNONE,HNONE);
      ELSEIF (NARG.EQ.4) THEN;
$VM;
	 CALL T2TYPE('DX  ','TDPLOT',INTNP,DX);
$END;
	 CALL T2STLX(X,Y,DX,HNONE,HNONE,HNONE,INTNP);
	 CALL T2PLOT(X,Y,HNONE,DX,HNONE,HNONE,HNONE,INTNP,1,ITXTUR
	    ,SYSIZ,XYZLIM
	    ,HNONE,HNONE,HNONE);
      ELSEIF (NARG.EQ.3) THEN;
	 CALL T2STLX(X,Y,HNONE,HNONE,HNONE,HNONE,INTNP);
	 CALL T2PLOT(X,Y,HNONE,HNONE,HNONE,HNONE,HNONE,INTNP,1,ITXTUR
	    ,SYSIZ,XYZLIM
	    ,HNONE,HNONE,HNONE);
      ENDIF;
   ELSE;
      CALL T2TCKS(0);
   ENDIF;
   IF(FLAGS(54))CALL TXVOID;   "FLUSH TD BUFFERS"
   SYMBOL = SYMSAV;
   LINCOL=LCSAV; LINWID=LWSAV;
   FLAGS(30)=.FALSE.; 
END;
%E  SUBROUTINE TDPLT
SUBROUTINE TDPLT(CSYM,NP,X,Y,DX,DY,JTYPE,Z,DZ);
   IMPLICIT NONE;
"  THIS IS A USER-CALLABLE ROUTINE TO PLOT POINTS
   WITH TOPDRAWER.
"
   CHARACTER *(*) CSYM;
   REAL X(*),Y(*),DX(*),DY(*),Z(*),DZ(*);
   INTEGER NP,JTYPE;
   $HOLLERITH ISYM(2);
   $EXTERNAL;
   $SPECIFICATION;
   $EQUIVALENCE;
      INTEGER LCSAV,LWSAV,ITXTUR,INTNP;
      REAL SYSIZ;
      INTEGER T2INTR; REAL T2REAL; EXTERNAL T2INTR,T2REAL;
      REAL SYMSAV; "CALLING SEQUENCE FOR T2PLOT REQUIRES THIS"
      EXTERNAL TXSYM; REAL TXSYM; "PACK CHAR PAIR INTO 1 REAL WORD"
   $DATA;
   $SPECIFYNONE;

   $CHECK ARGS(1,9);
   LCSAV=LINCOL; LWSAV=LINWID;       "Save intensity, color"
   FLAGS(30)=.TRUE.;
   SYMSAV=SYMBOL;                    "Save current symbol"
   ITXTUR=0;
   SYSIZ=0;
   INTNP=T2INTR(NP);
   IF(NARG .ge.7) ITXTUR=JTYPE;
   IF (NARG.GE.4) THEN;
      SYMBOL = TXSYM(CSYM);          "Get it in packed form"
$VM;
      CALL T2TYPE('X   ','TDPLOT',INTNP,X);
      CALL T2TYPE('Y   ','TDPLOT',INTNP,Y);
$END;
      IF (NARG.GE.9) THEN;
	 CALL T2STLX(X,Y,DX,DY,Z,DZ,INTNP);
	 CALL T2PLOT(X,Y,Z,DX,DY,DZ,HNONE,INTNP,1,ITXTUR
	    ,SYSIZ,XYZLIM
	    ,HNONE,HNONE,HNONE);
      ELSEIF (NARG.GE.8) THEN;
	 CALL T2STLX(X,Y,DX,DY,Z,HNONE,INTNP);
	 CALL T2PLOT(X,Y,Z,DX,DY,HNONE,HNONE,INTNP,1,ITXTUR
	    ,SYSIZ,XYZLIM
	    ,HNONE,HNONE,HNONE);
      ELSEIF (NARG.GE.6) THEN;
$VM;
	 CALL T2TYPE('DX  ','TDPLOT',INTNP,DX);
	 CALL T2TYPE('DY  ','TDPLOT',INTNP,DY);
$END;
	 CALL T2STLX(X,Y,DX,DY,HNONE,HNONE,INTNP);
	 CALL T2PLOT(X,Y,HNONE,DX,DY,HNONE,HNONE,INTNP,1,ITXTUR
	    ,SYSIZ,XYZLIM
	    ,HNONE,HNONE,HNONE);
      ELSEIF (NARG.EQ.5) THEN;
$VM;
	 CALL T2TYPE('DX  ','TDPLOT',INTNP,DX);
$END;
	 CALL T2STLX(X,Y,DX,HNONE,HNONE,HNONE,INTNP);
	 CALL T2PLOT(X,Y,HNONE,DX,HNONE,HNONE,HNONE,INTNP,1,ITXTUR
	    ,SYSIZ,XYZLIM
	    ,HNONE,HNONE,HNONE);
      ELSEIF (NARG.EQ.4) THEN;
	 CALL T2STLX(X,Y,HNONE,HNONE,HNONE,HNONE,INTNP);
	 CALL T2PLOT(X,Y,HNONE,HNONE,HNONE,HNONE,HNONE,INTNP,1,ITXTUR
	    ,SYSIZ,XYZLIM
	    ,HNONE,HNONE,HNONE);
      ENDIF;
   ELSE;
      CALL T2TCKS;
   ENDIF;
   IF(FLAGS(54))CALL TXVOID;   "FLUSH TD BUFFERS"
   SYMBOL = SYMSAV;
   LINCOL=LCSAV; LINWID=LWSAV;
   FLAGS(30)=.FALSE.; 
END;
%E  FUNCTION T2INTR
INTEGER FUNCTION T2INTR(IVALUE);
   "Provides integer value  from real or integer argument"
   $LONG INTEGER IVALUE;
$VM;
   $LONG INTEGER IV;
   REAL XV;
   EQUIVALENCE (XV,IV); IV=IVALUE;
   IF (IABS(IV).GT. 250 000 000 .OR. XV.EQ.0.) THEN; T2INTR=XV;
   ELSE; T2INTR=IV; ENDIF;
$ELSE;
   T2INTR=IVALUE;        "Not possible on VAX"
$END;
END;
REAL FUNCTION T2REAL(IVALUE);
   "Provides real value from real or integer argument"
$VM;
   $LONG INTEGER IVALUE;
   REAL XV;
   $LONG INTEGER IV;
   EQUIVALENCE (IV,XV); IV=IVALUE;
   IF (IABS(IV).GT. 250 000 000 .OR. XV.EQ.0.) THEN; T2REAL=XV;
   ELSE; T2REAL=IV; ENDIF;
$ELSE;
   REAL IVALUE;
   T2REAL=IVALUE;
$END;
END;
%E  SUBROUTINE TDSET
SUBROUTINE TDSET(TEXT);
   IMPLICIT NONE;
   $HOLLERITH TEXT(257);
"  THIS ROUTINE SETS UP THE INFO ARRAY TO GO WITH TEXT,
   AND CALLS THE INTERPRETER FOR THE -SET-
   COMMANDS.  'TEXT' MAY START WITH 'SET ', BUT NEEDNT.
   'TEXT' MUST END WITH ';', TO TERMINATE THE SCAN BY THE
   INTERPRETER.
"
   $SPECIFICATION; $EXTERNAL;
   INTEGER INFOIN(10),NTEXT,NN,IERFLG,JOUSAV,I;
   CHARACTER*256 STR;
   $EQUIVALENCE;
   EQUIVALENCE(INFOIN(1),NTEXT);
   $DATA;

   NTEXT = 1; IERFLG = 0;
   STR(1:1)=' ';
   <NN=1,256;
      STR(NN:NN)=CHAR(TEXT(NN));
      IF (STR(NN:NN).eq.';') <EXIT>;
$ASCII;
      IF (TEXT(NN).lt. 32) <EXIT>;
$ELSE;
      IF (TEXT(NN).eq.0) <EXIT>;
$END;
      NTEXT=NN;
   >
   IF (NTEXT.GE.256) THEN;
      ERROR MESSAGE;('*** WARNING *** No terminating semicolon',
	 ' call to TDSET ignored.');
      IERFLG = 1;
      RETURN;
   ENDIF;
   IF (IERFLG.EQ.0) THEN;
      FLAGS(30) = .TRUE.;
      <I=2,10; INFOIN(I)=0;>
      INFOIN(2)=-3;
      JOUSAV=JOUFIL;
      JOUFIL=0;
      CALL T2SET(INFOIN,STR(1:NTEXT));
      JOUFIL=JOUSAV;
      FLAGS(30)=.FALSE.;
   ENDIF;
END;
%E  SUBROUTINE TDTITL
SUBROUTINE TDTITL(TEXT,X,Y);
   IMPLICIT NONE;
   $TDFCOM;
   $HOLLERITH TEXT(256);  REAL X,Y;
   $SPECIFICATION; $EXTERNAL;
   $EQUIVALENCE;
   $CHECK ARGS(1,3);
   IF (NARG.EQ.1) CALL TDCASE(TEXT,'; ');
   IF (NARG.EQ.2) CALL TDCASE(TEXT,'; ',X);
   IF (NARG.EQ.3) CALL TDCASE(TEXT,'; ',X,Y);
END;
%E  SUBROUTINE TDTITN
SUBROUTINE TDTITN(VAL,W,D,X,Y);
   IMPLICIT NONE;
   $TDFCOM;
   INTEGER W,D;
   REAL VAL,X,Y,VALUE;
   $SPECIFICATION; $EXTERNAL;
   CHARACTER*20 TEXT;
   INTEGER T2INTR; REAL T2REAL;
   $EQUIVALENCE;
   INTEGER LW,LD,IF,IL;
   $CHECK ARGS(3,5);
   TEXT=' ';
   VALUE=T2REAL(VAL);
   LW=T2INTR(W); IF (IABS(LW).GT.19) LW=ISIGN(19,LW);
   LD=T2INTR(D);
   CALL T2CRMF(VALUE,LW,LD,TEXT,IF,IL);
   LW=IABS(LW); TEXT(LW+1:LW+1)=';';
   IF (NARG.EQ.3) CALL TDCASE(%REF(TEXT),'; ');
   IF (NARG.EQ.4) CALL TDCASE(%REF(TEXT),'; ',X);
   IF (NARG.EQ.5) CALL TDCASE(%REF(TEXT),'; ',X,Y);
END;
%E  SUBROUTINE TDTSET
SUBROUTINE TDTSET(SIZE,ANGLE,SPACES,IDATA);
   IMPLICIT NONE;
   REAL SIZE,ANGLE,SPACES;
   INTEGER IDATA;
   $TDFCOM
   $EXTERNAL;
   $CHECK ARGS(1,4);
      OPTIONS=' ';
      NOPT=1;
      GO TO (:1:,:2:,:3:,:4:),NARG;
      :4: IF(IDATA .ne. 0) THEN;
	     OPTIONS='DATA'; NOPT=6;
	  ENDIF;
      :3: WRITE(OPTIONS(NOPT:NOPT+20),'(A,1p,G11.4)') 'SPACE=',SPACES;
	  NOPT=NOPT+18;
      :2: WRITE(OPTIONS(NOPT:NOPT+20),'(A,1p,G11.4)') 'ANGLE=',ANGLE;
	  NOPT=NOPT+18;
      :1: WRITE(OPTIONS(NOPT:NOPT+20),'(A,1p,G11.4)') 'SIZE= ',SIZE;
	  NOPT=NOPT+18;
END;
%E  SUBROUTINE T2ERRA
SUBROUTINE T2ERRA(NERR,NARG);
   IMPLICIT NONE;
   $SPECIFICATION;
   $TDFCOM
   INTEGER NERR,NARG;
   "Routine called in case of error in number of arguements in
    call by user.
      NERR = Times called from this routine (to limit output)
      NARG = Number of args in call by user
   "
   IF (NERR.LE.5) THEN;
      ERROR MESSAGE NARG;
	 ('*** ERROR ***',I3,' Arguements. call ignored.');
$VAX;
   CALL LIB$SIGNAL(%VAL(0));
$END;
   ENDIF;
END;
%E  SUBROUTINE T2TYPE
$VM;   "FOR IBM WE DO IT RIGHT"
SUBROUTINE T2TYPE(NAME,ROUTIN,N,ARRAY);
   INTEGER N; REAL NAME,ROUTIN(2),ARRAY(N);
   "THIS ROUTINE LOOKS AT ARRAY AND GIVES AN ERROR MESSAGE IF
    IT LOOKS LIKE IT IS NOT TYPE REAL.
   "
   $SPECIFICATION;
   REAL VAL1,VAL2; $BOOLEAN LVAL1(4),LVAL2(4);
      EQUIVALENCE (VAL1,LVAL1(1)),(VAL2,LVAL2(1));
   INTEGER TYPE(6,2);
      DATA TYPE/'INTE','GER ','VALU','ES. ','    ','    '
	       ,'DOUB','LE P','RECI','SION',' VAL','UES.'/;
   DATA NMSG/5/;
   $SPECIFYNONE
   IF (NMSG.EQ.0) RETURN;
   IF (N.EQ.1) RETURN;
   IF (ARRAY(1).EQ.HNONE) RETURN;
   "LOOK AT ALL PAIRS OF VALUES"
      <I=2,N,2;
	 IF (ARRAY(I-1).NE.0.0 .AND. ARRAY(I).NE.0.) THEN;
	    VAL1=ABS(ARRAY(I-1)); VAL2=ABS(ARRAY(I));
	    IF (LVAL1(1).EQ.0) THEN;  "LOOKS LIKE INTEGER"
	       NERR=1; GOTO :MESSAGE:;
	    ENDIF;
	    IF (LVAL2(1).LT.32) THEN;
	       IF (LVAL1(1).GT.LVAL2(1)+20) THEN;
		  NERR=2; GOTO :MESSAGE:;
	       ENDIF;
	    ENDIF;
	 ENDIF;
      >
      RETURN;
   :MESSAGE:
     ERROR MESSAGE NAME,ROUTIN,(TYPE(I,NERR),I=1,6);
	('*** WARNING *** THE ',
	A4,' ARRAY IN THE CALL TO ',A4,A2,
	' APPEARS TO CONTAIN ',6A4,'VALUES.');
     NMSG=NMSG-1;
END;
$END;
%E  SUBROUTINE T2STLX
SUBROUTINE T2STLX(XVALS,YVALS,XERRS,YERRS,ZVALS,ZERRS,NP);
   IMPLICIT NONE;
   INTEGER NP;
   REAL XVALS(*),YVALS(*),XERRS(*),YERRS(*),ZVALS(*),ZERRS(*);
   INTEGER I,J,K,L;
   $SPECIFYNONE;
   $SPECIFICATION;
   $SPECIFYD;
   INTEGER IFLAG(6);
   REAL EXTREM(6);
   $EQUIVALENCE;
   $DATA;
   IF (NP.GT.0 .and. .not. FLAGS(75)) THEN;      "Points + no data frame ?"
      K=0;
      <J=1,3; <I=1,2;
	 L=2*J+I-2;
	 IF (FLAGS(L+4).or.FLAGS(L+64).or.DFLAGS(L+64)) THEN;  "Limit set ?"
	    IFLAG(L)=1;  EXTREM(L)=XYZLIM(J,I); K=K+1;         "Keep it"
	 ELSE;
	    IFLAG(L)=-1; EXTREM(L)=0;                          "New limit"
	 ENDIF;
      >  >
      IF (K .GE. 6) RETURN;             "All limits set ??"
      CALL T2STL1(XVALS,XERRS,HNONE,HNONE,
	NP,NONLIN(1),IFLAG,EXTREM,1,1,1,1);
      CALL T2STL1(YVALS,YERRS,HNONE,HNONE,
	NP,NONLIN(2),IFLAG(3),EXTREM(3),1,1,1,1);
      IF (ZVALS(1) .ne. HNONE) THEN;    "Z value available ??"
	 CALL T2STL1(ZVALS,ZERRS,HNONE,NP,NONLIN(3),IFLAG(5),EXTREM(5)
	    ,1,1,1,1);
	 $3D=NDIMNS(1).ne.2;
      ELSE;
	 CALL T2STL1(0.0,ZERRS,HNONE,1,NONLIN(3),IFLAG(5),EXTREM(5),1,1,1,1);
      ENDIF;
      <J=1,3; <I=1,2; XYZLIM(J,I)=EXTREM(2*J+I-2);> >
      <I=5,10; FLAGS(I)=.TRUE.;>
   ENDIF;
END;
"  ------------- END OF FORTRAN-CALLABLE ROUTINES 'TDEND' --"

